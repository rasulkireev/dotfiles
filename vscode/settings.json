{
  /**
   * Better Defaults
  **/
  "diffEditor.ignoreTrimWhitespace": false,
  "editor.bracketPairColorization.enabled": true,
  "editor.copyWithSyntaxHighlighting": false,
  "editor.detectIndentation": false,
  "editor.emptySelectionClipboard": false,
  "editor.lineNumbers": "on",
  "editor.multiCursorModifier": "ctrlCmd",
  "editor.snippetSuggestions": "top",
  "files.insertFinalNewline": true,
  "files.trimFinalNewlines": true,
  "files.trimTrailingWhitespace": true,
  "window.nativeFullScreen": false,
  "window.newWindowDimensions": "inherit",
  "workbench.tree.indent": 24,
  "workbench.tree.renderIndentGuides": "always",

  /**
   * Silence The Noise
  **/
  "breadcrumbs.enabled": false,
  "editor.colorDecorators": false,
  "editor.gotoLocation.multipleDeclarations": "goto",
  "editor.gotoLocation.multipleDefinitions": "goto",
  "editor.gotoLocation.multipleImplementations": "goto",
  "editor.gotoLocation.multipleReferences": "goto",
  "editor.gotoLocation.multipleTypeDefinitions": "goto",
  "editor.hideCursorInOverviewRuler": true,
  "editor.hover.enabled": true,
  "editor.lightbulb.enabled": "off",
  "editor.matchBrackets": "never",
  "editor.occurrencesHighlight": "off",
  "editor.overviewRulerBorder": false,
  "editor.renderControlCharacters": false,
  "editor.renderLineHighlight": "none",
  "editor.selectionHighlight": true,
  "git.decorations.enabled": true,
  "problems.decorations.enabled": false,
  "scm.diffDecorations": "none",
  "workbench.editor.enablePreviewFromQuickOpen": false,
  "workbench.startupEditor": "none",
  "workbench.tips.enabled": false,

  /**
   * Typography
   **/
  "editor.fontFamily": "MonoLisa",
  "editor.fontLigatures": "'ss02' on",
  "editor.fontSize": 14,
  "editor.lineHeight": 0,
  // "editor.suggestFontSize": 15,
  // "editor.suggestLineHeight": 28,
  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        "scope": "comment",
        "settings": {
          "fontStyle": "italic"
        }
      }
    ]
  },

  /**
   * Hide Everything
  **/
  "editor.minimap.enabled": false,
  "workbench.colorCustomizations": {
    "statusBar.background": "#1e1e1e",
    "activityBar.background": "#1e1e1e"
  },
  "workbench.editor.showTabs": "single",
  "workbench.sideBar.location": "right",

  /**
   * Find
   **/
  "search.useIgnoreFiles": false,
  "search.exclude": {
    "**/vendor/{[^l],?[^ai]}*": true,
    "**/public/{[^i],?[^n]}*": true,
    "**/node_modules": true,
    "**/build": true,
    "**/dist": true,
    "**/.angular": true,
    "**/.temp": true,
    "**/_ide_helper.php": true,
    "**/composer.lock": true,
    "**/poetry.lock": true,
    "**/package-lock.json": true,
    "**/.venv": true,
    "**/__pycache__": true,
    "storage": true,
    ".phpunit.result.cache": true,
    "**/.vercel": true,
    "alfred/": true,
    "**/gitignored": true,
    "**/.next/": true,
    "**/extensions": true,
    "**/bundles": true,
    "**/static": true,
  },

  /**
   * Window Settings
   **/
  // "window.nativeTabs": true,
  "window.titleBarStyle": "custom",
  "customizeUI.titleBar": "inline",
  "customizeUI.stylesheet": {
    ".editor .title": "background: transparent !important;",
    ".editor .title .label-container": "visibility: hidden;",
    ".editor .title .actions-container .action-item a": "visibility: hidden;",
    ".editor .title .actions-container .action-item a[title=\"Open Settings (UI)\"]": "visibility: initial;",
    ".editor .title .actions-container .action-item a[title=\"Open Settings (JSON)\"]": "visibility: initial;",
    ".editor .title .actions-container": "flex-direction: row-reverse;",
    // Only show the scrollbar on hover.
    // ".editor .scrollbar .slider": "visibility: hidden",
    // ".editor .scrollbar:hover .slider": "visibility: initial",
    // Change cursor color.
    ".monaco-editor .cursor": "background: linear-gradient(to bottom, #7f00ff, #e100ff) !important; color: #292D3E !important"
  },

  // Code Specific Settings
  "[python]": {
    "editor.formatOnPaste": false,
    "editor.formatOnSave": false
  },
  "python.languageServer": "Pylance",
  "python.linting.pylintEnabled": false,
  "python.linting.enabled": false,

  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  "[html]": {
    "html.suggest.html5": true,
    "editor.linkedEditing": true,
    "editor.defaultFormatter": "vscode.html-language-features"
  },

  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": false
  },
  "prettier.requireConfig": true,
  "prettier.useEditorConfig": false,

  // TailwindCSS
  "editor.quickSuggestions": {
    "strings": true
  },

  /**
  * Code
  **/
  // Include "-" in word selection.
  "editor.wordSeparators": "`~!@#%^&*()=+[{]}\\|;:'\",.<>/?",
  "emmet.includeLanguages": {
    "django-html": "html",
    "blade": "html",
    "vue-html": "html",
    "vue": "html"
  },

  /** Spelling **/
  /** Taken from: https://www.coderedcorp.com/blog/spell-check-vscode/ **/

  // Only spell check the following file types, ignore all others.
  "spellright.documentTypes": [
    "markdown",
    "restructuredtext",
    "latex",
    "plaintext",
    "html"
  ],

  // Within those file types, ignore the following sections.
  "spellright.ignoreRegExps": [
    // ignore code blocks (surrounded by at least one backtick)
    "/`+([\\s\\S\\w\\W]+?)`+/g",
    // ignore code blocks (rst double colon)
    "/::\\n\\n([\\s\\S\\w\\W]+?)(?=\\n\\S)/g",
    // ignore code-blocks (rst double period)
    "/\\.\\. code\\-block::[\\s\\w]*\\n\\n([\\s\\S\\w\\W]+?)(?=\\n\\S)/g",
    // ignore string assignment (e.g. HTML tag properties)
    "/\\w+\\s*\\=+\\s*[\"\\']+.+[\"\\']+/g"
  ],

  // Within HTML files specifically
  "spellright.ignoreRegExpsByClass": {
    "html": [
      // ignore Django/Jinja template tags
      "/\\{[\\{\\%\\#].+[\\#\\%\\}]\\}/g",
      // ignore script tag contents
      "/<script.*?>([\\s\\S\\w\\W]*?)</script>/g",
      // ignore style tag contents
      "/<style>([\\s\\S\\w\\W]*?)</style>/g",
      // ignore actual HTML tags, but not the contents.
      "/<[\\s\\S\\w\\W]+?>/g"
    ]
  },

  "editor.tabSize": 2,

  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "go.toolsManagement.autoUpdate": true,
  "editor.suggestSelection": "first",
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
  "files.exclude": {
    "**/.classpath": true,
    "**/.project": true,
    "**/.settings": true,
    "**/.factorypath": true
  },
  "editor.formatOnSave": false,
  "bracketPairColorizer.depreciation-notice": false,
  "security.workspace.trust.untrustedFiles": "newWindow",

  // Plugins
  "emojisense.languages": {
    "markdown": true,
    "plaintext": false,
    "json": false,
    "scminput": true
  },

  // Newer
  "editor.guides.indentation": false,
  "editor.guides.bracketPairs": true,
  "editor.inlineSuggest.enabled": true,
  "terminal.integrated.confirmOnExit": "hasChildProcesses",
  "extensions.ignoreRecommendations": true,
  "terminal.integrated.fontSize": 12,
  "terminal.integrated.lineHeight": 1,
  "files.associations": {
    "*.html": "html",
    "*.css": "tailwindcss"
  },
  "update.showReleaseNotes": false,

  // dart and flutter
  // Causes the debug view to automatically appear when a breakpoint is hit. This
	// setting is global and not configurable per-language.
	"debug.openDebug": "openOnDebugBreak",

	// By default, VS Code will only switch to the Debug Console when you start
	// debugging the first time in a session. This setting tells VS Code to always
	// switch to the Debug Console when starting a session, so you can see the
	// programs output.
	"debug.internalConsoleOptions": "openOnSessionStart",

	"[dart]": {
		// Automatically format code on save and during typing of certain characters
		// (like `;` and `}`).
		"editor.formatOnSave": true,
		"editor.formatOnType": true,

		// Draw a guide line at 80 characters, where Dart's formatting will wrap code.
		"editor.rulers": [80],

		// Disables built-in highlighting of words that match your selection. Without
		// with Dart's ability to highlight only exact references to the selected variable.
		// this, all instances of the selected text will be highlighted, interfering
		"editor.selectionHighlight": false,

		// By default, VS Code will pre-select the most recently used item from code
		// completion. This is usually not the most relevant item.
		//
		// "first" will always select top item
		// "recentlyUsedByPrefix" will filter the recently used items based on the
		//     text immediately preceding where completion was invoked.
		"editor.suggestSelection": "first",

		// Allows pressing <TAB> to complete snippets such as `for` even when the
		// completion list is not visible.
		"editor.tabCompletion": "onlySnippets",

		// By default, VS Code will populate code completion with words found in the
		// current file when a language service does not provide its own completions.
		// This results in code completion suggesting words when editing comments and
		// strings. This setting will prevent that.
		"editor.wordBasedSuggestions": "off"
  },
  "python.analysis.extraPaths": [
    "/Users/rasul/.vscode/extensions/continue.continue-0.0.412-darwin-arm64",
    "/Users/rasul/.vscode/extensions/continue.continue-0.6.14-darwin-arm64",
    "/Users/rasul/.vscode/extensions/continue.continue-0.6.15-darwin-arm64",
    ".venv"
  ],
  "python.autoComplete.extraPaths": [
    "/Users/rasul/.vscode/extensions/continue.continue-0.0.412-darwin-arm64",
    "/Users/rasul/.vscode/extensions/continue.continue-0.6.14-darwin-arm64",
    "/Users/rasul/.vscode/extensions/continue.continue-0.6.15-darwin-arm64"
  ],
  "workbench.statusBar.visible": false,
  "workbench.activityBar.location": "hidden",
  "workbench.colorTheme": "Default Dark+",
  "codeium.enableCodeLens": false
}
