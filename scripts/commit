#!/bin/bash

# Function to check if git repository exists
check_git_repo() {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "Error: Not a git repository"
        exit 1
    fi
}

# Function to check if there are any changes
check_changes() {
    if [ -z "$(git status --porcelain)" ]; then
        echo "No changes to commit"
        exit 0
    fi
}

# Function to handle pre-commit hook failures
handle_pre_commit_failure() {
    echo "Pre-commit hooks failed. Would you like to:"
    echo "1. Try to fix and commit again"
    echo "2. Skip pre-commit hooks (--no-verify)"
    echo "3. Abort"
    read -p "Enter your choice (1-3): " choice

    case $choice in
        1)
            return 1
            ;;
        2)
            return 2
            ;;
        3)
            echo "Aborting commit process."
            exit 1
            ;;
        *)
            echo "Invalid choice. Aborting."
            exit 1
            ;;
    esac
}

# Function to get file changes and generate commit message
generate_commit_message() {
    local files="$1"
    local diff_content=$(git diff --staged)

    # Use llm to analyze changes and generate commit message
    local commit_message=$(echo -e "Files changed:\n$files\n\nChanges:\n$diff_content" | \
        llm -m anthropic/claude-3-5-sonnet-latest \
        "Analyze these git changes and generate a detailed commit message. Format it as follows:
        - First line: Brief summary (max 50 chars)
        - Blank line
        - Detailed explanation of changes (wrap at 72 chars)
        - Include any breaking changes or important notes
        Focus on the what and why of the changes, not just the how.")

    echo "$commit_message"
}

# Function to perform the commit
do_commit() {
    local commit_message="$1"
    local no_verify="$2"

    if [ "$no_verify" = true ]; then
        git commit --no-verify -m "$commit_message"
    else
        git commit -m "$commit_message"
    fi
}

# Main execution
main() {
    check_git_repo
    check_changes

    # Get list of changed files
    changed_files=$(git status --porcelain)

    # Use llm to analyze changes and suggest grouping
    grouping_strategy=$(echo "$changed_files" | \
        llm -m anthropic/claude-3-5-sonnet-latest \
        "Analyze these changed files and suggest how to group them for logical commits.
        Should they be committed together or separately? Return SINGLE if they should be
        committed together, or MULTIPLE if they should be split into separate commits.")

    if [ "$grouping_strategy" = "SINGLE" ]; then
        # Single commit approach
        git add --all
        commit_message=$(generate_commit_message "$changed_files")

        # Try to commit with pre-commit hooks
        if ! do_commit "$commit_message" false; then
            while true; do
                handle_pre_commit_failure
                case $? in
                    1)  # Try again
                        if do_commit "$commit_message" false; then
                            break
                        fi
                        ;;
                    2)  # Skip pre-commit
                        do_commit "$commit_message" true
                        break
                        ;;
                esac
            done
        fi
    else
        # Multiple commits approach
        echo "$changed_files" | while read -r file_status file_path; do
            if [ -n "$file_path" ]; then
                git add "$file_path"
                commit_message=$(generate_commit_message "$file_path")

                # Try to commit with pre-commit hooks
                if ! do_commit "$commit_message" false; then
                    while true; do
                        handle_pre_commit_failure
                        case $? in
                            1)  # Try again
                                if do_commit "$commit_message" false; then
                                    break
                                fi
                                ;;
                            2)  # Skip pre-commit
                                do_commit "$commit_message" true
                                break
                                ;;
                        esac
                    done
                fi
            fi
        done
    fi

    echo "Commit process completed successfully!"
}

main "$@"
